apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  name: maven-kaniko-workflow
spec:
  arguments:
    parameters:
      - name: branch
        valueFrom:
          configMapKeyRef:
            name: argo-params-config # Name of your ConfigMap
            key: workflowBranch      # Key within the ConfigMap
      - name: repo_org
        valueFrom:
          configMapKeyRef:
            name: argo-params-config
            key: repositoryOrg
      - name: repo_name
        valueFrom:
          configMapKeyRef:
            name: argo-params-config
            key: repositoryName
      - name: docker_registry
        valueFrom:
          configMapKeyRef:
            name: argo-params-config
            key: dockerRegistry
      - name: image_name
        valueFrom:
          configMapKeyRef:
            name: argo-params-config
            key: imageName
      - name: tag
        valueFrom:
          configMapKeyRef:
            name: argo-params-config
            key: imageTag
      - name: mvn_goals
        valueFrom:
          configMapKeyRef:
            name: argo-params-config
            key: mavenGoals
      - name: mvn_props
        valueFrom:
          configMapKeyRef:
            name: my-workflow-config
            key: mavenProps


  activeDeadlineSeconds: 3600 # Maximum workflow execution time (1 hour)

  # Volumes defined at the workflow level
  volumes:
    - name: docker-config
      secret:
        secretName: registry-cred

  # VolumeClaimTemplates allow dynamic provisioning of PersistentVolumes
  volumeClaimTemplates:
  - metadata:
      name: maven-cache-pvc
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 5Gi
  - metadata:
      name: shared-workspace-pvc # NEW: PVC for shared workspace
    spec:
      accessModes: [ "ReadWriteOnce" ] # Can be accessed by a single node
      resources:
        requests:
          storage: 1Gi # Allocate 1GB for source code. Adjust as needed.

  templates:
  - name: main
    inputs:
      parameters:
        - name: branch
        - name: repo_org
        - name: repo_name
        - name: docker_registry
        - name: image_name
        - name: tag
        - name: mvn_goals
        - name: mvn_props
    steps:
      - - name: debug-params
          template: show-params
        - name: clone-repository
          template: git-clone
          arguments:
            parameters:
              - name: branch
                value: "{{inputs.parameters.branch}}"
              - name: repo_org
                value: "{{inputs.parameters.repo_org}}"
              - name: repo_name
                value: "{{inputs.parameters.repo_name}}"
        - name: list-source-directory
          template: list-src-dir
        - name: build-maven-project
          template: maven-build
          arguments:
            parameters:
              - name: mvn_goals
                value: "{{inputs.parameters.mvn_goals}}"
              - name: mvn_props
                value: "{{inputs.parameters.mvn_props}}"
        - name: build-docker-image
          template: kaniko-build
          arguments:
            parameters:
              - name: docker_registry
                value: "{{inputs.parameters.docker_registry}}"
              - name: image_name
                value: "{{inputs.parameters.image_name}}"
              - name: tag
                value: "{{inputs.parameters.tag}}"
    parallelism: 1
    retryStrategy:
      limit: 1

  - name: show-params
    container:
      image: alpine:latest
      command: ["sh", "-c"]
      args:
        - |
          echo "--- Workflow Parameters ---"
          echo "Branch: {{workflow.parameters.branch}}"
          echo "Repo Org: {{workflow.parameters.repo_org}}"
          echo "Repo Name: {{workflow.parameters.repo_name}}"
          echo "Docker Registry: {{workflow.parameters.docker_registry}}"
          echo "Image Name: {{workflow.parameters.image_name}}"
          echo "Tag: {{workflow.parameters.tag}}"
          echo "Maven Goals: {{workflow.parameters.mvn_goals}}"
          echo "Maven Props: {{workflow.parameters.mvn_props}}"
          echo "---------------------------"
      volumeMounts:
        - name: shared-workspace-pvc # Use the new PVC
          mountPath: /workspace

  - name: git-clone
    inputs:
      parameters:
        - name: branch
        - name: repo_org
        - name: repo_name
    container:
      image: alpine/git:latest
      command: ["sh", "-c"]
      args:
        - |
          set -ex
          REPO_URL="https://github.com/{{inputs.parameters.repo_org}}/{{inputs.parameters.repo_name}}.git"
          echo "Cloning public repository $REPO_URL, branch {{inputs.parameters.branch}}"
          git clone --branch {{inputs.parameters.branch}} $REPO_URL /workspace || { echo "Git clone failed!"; exit 1; }
          echo "✅ Git clone succeeded"

          echo "--- Contents of /workspace AFTER clone (from git-clone pod) ---"
          ls -la /workspace
          echo "-------------------------------------------------------------"

          echo "--- Checking if pom.xml exists in /workspace (from git-clone pod) ---"
          if [ -f /workspace/pom.xml ]; then
            echo "pom.xml found in /workspace (from git-clone pod)."
          else
            echo "pom.xml NOT found in /workspace (from git-clone pod) immediately after clone."
          fi
          echo "-------------------------------------------------------------------"
      volumeMounts:
        - name: shared-workspace-pvc # Use the new PVC
          mountPath: /workspace

  - name: list-src-dir
    container:
      image: alpine:latest
      command: ["sh", "-c"]
      args:
        - |
          echo "--- Contents of /workspace ---"
          ls -la /workspace || echo "Directory /workspace not found or empty"
          echo "------------------------------"
      volumeMounts:
        - name: shared-workspace-pvc # Use the new PVC
          mountPath: /workspace

  - name: maven-build
    inputs:
      parameters:
        - name: mvn_goals
        - name: mvn_props
    container:
      image: maven:3.9.6-eclipse-temurin-17
      command: ["sh", "-c"]
      args:
        - |
          set -ex
          echo "--- Contents of /workspace ---"
          ls -la /workspace # This is the critical diagnostic output we need
          echo "----------------------------"

          if [ ! -f /workspace/pom.xml ]; then # Check for pom.xml at the root
            echo "Error: pom.xml not found in /workspace. Aborting Maven build."
            exit 1
          fi
          echo "Starting Maven build with goals: {{inputs.parameters.mvn_goals}} {{inputs.parameters.mvn_props}}"
          cd /workspace && mvn {{inputs.parameters.mvn_goals}} {{inputs.parameters.mvn_props}} # Run mvn from /workspace
          echo "✅ Maven build succeeded"
      volumeMounts:
        - name: shared-workspace-pvc # Use the new PVC
          mountPath: /workspace
        - name: maven-cache-pvc
          mountPath: /root/.m2

  - name: kaniko-build
    inputs:
      parameters:
        - name: docker_registry
        - name: image_name
        - name: tag
    container:
      image: gcr.io/kaniko-project/executor:v1.17.0-debug
      command: ["sh", "-c"]
      args:
        - |
          set -ex
          if [ ! -f /workspace/Dockerfile ]; then
            echo "Error: Dockerfile not found in /workspace. Aborting Kaniko build."
            exit 1
          fi
          FULL_IMAGE_DESTINATION="{{inputs.parameters.docker_registry}}/{{inputs.parameters.image_name}}:{{inputs.parameters.tag}}"
          echo "Building Docker image: \$FULL_IMAGE_DESTINATION"
          /kaniko/executor --dockerfile=/workspace/Dockerfile \
                          --context=/workspace \
                          --destination=\$FULL_IMAGE_DESTINATION \
                          --cache=true
          echo "✅ Docker image build succeeded"
      volumeMounts:
        - name: docker-config
          mountPath: /kaniko/.docker
        - name: shared-workspace-pvc # Use the new PVC
          mountPath: /workspace